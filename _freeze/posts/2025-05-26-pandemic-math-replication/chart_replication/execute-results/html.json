{
  "hash": "1db776da8a2f4574534a94cf5bba3c20",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"chart_replication\"\nformat:\n  html: \n    code-fold: true\n    code-tools: true\nknitr:\n  opts_chunk: \n    message: false\n    warning: false\n---\n\n\n\n# Introduction\n\nA really valuable exercise in learning about data visualization with `ggplot` is\nfinding high quality graphics found in popular newspapers and attempting to recreate\nthem from scratch. I first discovered this exercise by watching Patrick Schloss on his\nRiffomonas YouTube channel, and as my second blog post, wanted to give my own example. I hope to give \nthose new to `ggplot` the confidence to do the same.\n\nI decided to replicate a graph from a [New York Times article](https://www.nytimes.com/2025/04/07/us/low-performing-students-reasons.html) on the decline\nof math and reading scores in the United States, among 8th and 4th graders, respectively. Below I display the graphic, produced by Francesca Paris using data from the National Assessment of Educational Progress (NAEP).\n\n![NYT Graphic](nyt_graphic.png){width=6.6in}\n\n\nI have obtained the data from the NAEP, but it wasn't in a [tidy form](https://r4ds.hadley.nz/data-tidy.html). I did some data cleaning and saved it as a clean .csv file you can access. Since this post isn't about data wrangling but data visualization, I will spare you the details. Let's start by making a basic plot. At each follow-up step, I will post an increasingly elaborate version of the same code, with comments added to some of the additions. You can skip to the end to see the final version. \n\nOur tibble has columns `Year`, `percentile` (10, 25, 50, 75, or 90), `score`, and `subject`. We will use the `geom_line()` and `geom_point()` geometries, with aesthetics `x = Year`, `y = score`, and `group = percentile`, and lastly we facet by `subject` (i.e., a separate plot per value of `subject`). Well, let's pause for a moment. We *could* facet by `subject`, but I realized later when creating this post that we lose the ability to easily set $y$-limits for each faceted panel separately. Instead, we will create *two* separate plot and put them together using the `cowplot` package. For now, let us just focus on the `subject = math` plot, since the code is the same. While we're loading in packages, I'm going to import the Libre Franklin font from Google Fonts as that resembles the font used by the New York Times. We'll actually change the fonts at the end.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\" code-summary=\"Hide code\"}\nlibrary(tidyverse)\nlibrary(ggtext) # Formats markdown in plot text\nlibrary(glue) # String interpolation\nlibrary(showtext) # Changing plot font\nlibrary(cowplot) # Combining ggplots in a grid\n\nfont_add_google(name = 'Libre Franklin', family = 'franklin')\nfilename = 'national_math_8th_reading_4th_scores_1990_to_2024_by_percentile.csv'\n\ndf = read_csv(filename) |> \n  filter(Year >= 2000) |> \n  # focus on math for now\n  filter(subject == 'math')\n\nplot = df |> \n  ggplot(aes(x = Year, \n             y = score,\n             group = percentile # one line per percentile\n  )) + \n  geom_point() + \n  geom_line() \n\nplot\n```\n\n::: {.cell-output-display}\n![](chart_replication_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n\nAlready, we have made a great start! Let's take care of some low hanging fruit. We don't need the $x$-axis label, and the $y$-axis label information will be present in the title. The title will be formatted with markdown using the `ggtext` package. \n\nLet's reduce the unnecessary theming by adding `theme_minimal()`, including the grey background. Then we will remove the vertical gridlines and the minor horizontal ones using the `panel.grid.*` arguments to `theme()`. We will also add back tick marks which were removed by `theme_minimal()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\" code-summary=\"Hide code\"}\nplot = df |> \n  ggplot(aes(x = Year, \n             y = score, \n             group = percentile)) + \n  geom_point() + \n  geom_line() + \n  # Unnecessary theming removed\n  theme_minimal() +\n  labs(x = NULL, \n       y = NULL,\n       title = \"**Math** scores for **8th graders**\") +\n  theme(# format facet labels with markdown\n        plot.title = element_markdown(),  \n        # Now remove a bunch of gridlines\n        panel.grid.major.x = element_blank(), \n        panel.grid.minor.x = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        # add back x axis ticks and change their length\n        axis.ticks.x.bottom = element_line(),\n        axis.ticks.length.x.bottom = unit(0.2, \"cm\"))\n\nplot\n```\n\n::: {.cell-output-display}\n![](chart_replication_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\nNext we need to add some color. The author chose to place the lowest and highest deciles in a different color than the rest. Thus, we will create a binary indicator column reflecting this grouping, prior to our `ggplot`. After that, we can add a color aesthetic according to this grouping. Using the 'Eyedropper' tool in Mozilla Firefox, I determined the author used colors '#b35f57' and '#aaaaaa'. We will use `scale_color_manual()` to implement this new color scale. The legend is unnecessary, so we remove it using `guides()`.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\" code-summary=\"Hide code\"}\nplot = df |> \n  mutate(is_extreme_score = \n           ifelse(percentile == '10' | percentile == '90',\n                  \"yes\", \"no\")) |> \n  ggplot(aes(x = Year,\n             y = score, \n             group = percentile,\n             color = is_extreme_score)) + \n  geom_point() + \n  geom_line() + \n  theme_minimal() +\n  labs(x = NULL, \n       y = NULL,\n       title = \"**Math** scores for **8th graders**\") +\n  theme(plot.title = element_markdown(),  \n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        axis.ticks.x.bottom = element_line(),\n        axis.ticks.length.x.bottom = unit(0.2, \"cm\")) +\n  scale_color_manual(\n    # Specify breaks explicitly so we get colors in the right order\n    breaks = c('yes', 'no'), \n    values = c('#b35f57', '#aaaaaa')) +\n  guides(color = 'none') # unnecessary legend\n\nplot\n```\n\n::: {.cell-output-display}\n![](chart_replication_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\nWe now add the labels. This will require creating another column `pretty_label` in our dataset\nwith the label. This will require some case-work with the `case_when()` function. Since we only want a label by the 2024 dot, we need to set the label as `NA` for all other years. The top and bottom percentiles have their\nown unique label, and for the middle percentiles, we can do some string interpolation using the `glue` package. After that, we can call the `geom_richtext()` function, which is an extension of `geom_text()` from the `ggtext` package to allow for Markdown formatting. In particular, we bold the extremes and add a line break with `<br>`. We also want the labels to the right, which we set using `hjust`.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\" code-summary=\"Hide code\"}\nplot = df |> \n  mutate(is_extreme_score = ifelse(percentile == '10' | percentile == '90',\n                                   \"yes\", \"no\"),\n         pretty_label = case_when(\n           percentile == 90 & Year == 2024 ~ \"**Top<br>scorers**\",\n           percentile == 10 & Year == 2024 ~ \"**Lowest<br> scorers**\",\n           (percentile >= 25 | percentile <= 90) & Year == 2024 ~ \n             glue(\"{percentile}th<br>percentile\"),\n           .default = NA_character_\n         )) |> \n  ggplot(aes(x = Year,\n             y = score, \n             group = percentile,\n             color = is_extreme_score)) + \n  geom_point() + \n  geom_line() + \n  geom_richtext(aes(label = pretty_label),\n                fill = NA, # text box should be transparent\n                na.rm = TRUE, \n                label.color = NA, # Remove the box outline\n                hjust = 0 # reposition text to right\n                ) +\n  theme_minimal() +\n  labs(x = NULL, \n       y = NULL,\n       title = \"**Math** scores for **8th graders**\") +\n  theme(plot.title = element_markdown(),  \n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        axis.ticks.x.bottom = element_line(),\n        axis.ticks.length.x.bottom = unit(0.2, \"cm\")) +\n  scale_color_manual(breaks = c('yes', 'no'),\n                     values = c('#b35f57', '#aaaaaa')) +\n  guides(color = 'none') \n\nplot\n```\n\n::: {.cell-output-display}\n![](chart_replication_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\nWe need to fix the limits, margins, and breaks of the axes. For example, we want to prevent plot items like the text from being clipped by the panel margins, and instead be clipped by the plot boundaries itself.To do so, set `clip = F` with the `coord_cartesian()` function. While we're at it, we can set `expand = F` to avoid the unnecessary expansion `ggplot` adds by default to the scale. Instead, we manually set the $x$ and $y$ limits with the `scale_*_continuous()` functions. It was at this point I realized why `facet_wrap` would fail: I needed to manually set the axes limits for each faceted plot separately, since math and reading are on different scales. The solution is to just make two separate `ggplot` objects and combine with the `cowplot` package later.\n\nIn addition to changing the limits, we can control the exact axis ticks that appear and their labels using the `breaks` and `label` argument of the `scale_x_continuous()` function. This requires some tedious relabeling of the axes. \n\nEven after this, we still need more space though. So we will directly set the `plot.margin` argument to give more space to the right.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\" code-summary=\"Hide code\"}\nplot = df |> \n  mutate(is_extreme_score = ifelse(percentile == '10' | percentile == '90',\n                                   \"yes\", \"no\"),\n         pretty_label = case_when(\n           percentile == 90 & Year == 2024 ~ \"**Top<br>scorers**\",\n           percentile == 10 & Year == 2024 ~ \"**Lowest<br> scorers**\",\n           (percentile >= 25 | percentile <= 90) & Year == 2024 ~ \n             glue(\"{percentile}th<br>percentile\"),\n           .default = NA_character_\n         )) |> \n  ggplot(aes(x = Year,\n             y = score, \n             group = percentile,\n             color = is_extreme_score)) + \n  geom_point() + \n  geom_line() + \n  geom_richtext(aes(label = pretty_label),\n                fill = NA, na.rm = TRUE, label.color = NA,\n                hjust = 0) +\n  theme_minimal() +\n  labs(x = NULL, \n       y = NULL,\n       title = \"**Math** scores for **8th graders**\") +\n  theme(plot.title = element_markdown(),  \n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        axis.ticks.x.bottom = element_line(),\n        axis.ticks.length.x.bottom = unit(0.2, \"cm\"),\n        plot.margin = margin(0.5,2,0.5,0.5, \"cm\") # Add space on right of plot\n        ) +\n  scale_color_manual(breaks = c('yes', 'no'),\n                     values = c('#b35f57', '#aaaaaa')) +\n  guides(color = 'none') +\n  coord_cartesian(expand = F, clip = 'off') +\n  scale_y_continuous(limits = c(210, 340), # Where to start and end the y axis\n                     breaks = seq(220, 320, by = 20) # Where to put tick marks\n                     # Note, no labels argument necessary because we literally\n                     # want to show the integer as the label\n  ) +\n  scale_x_continuous(\n    # where to start and end the x axis\n    limits = c(2000, 2024), \n    # where the tick marks belong\n    breaks = c(2000, 2003, 2007, 2011, 2015, 2019, 2024),\n    # what to label the tick marks that we picked using breaks\n    labels = c(\"'00\", \"'03\", \"'07\", \"'11\", \"'15\",\"'19\", \"'24\")\n  )\n\nplot\n```\n\n::: {.cell-output-display}\n![](chart_replication_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\nThis looks close to completion for the math version. Let's now write a function `plot_generator()` that makes the math *or* reading version of the plot. The function will take in the original tibble with both subjects included as well as the desired subject and output the specified plot. The function first does the necessary filtering and creation of new columns. The filtering part is a bit complicated, since we want to insert the `subject` argument into a `dplyr` function. This requires so called 'tidy evaluation' using the `!!` injection operator function from the `rlang` package. After subsetting and mutating the tibble, the function returns the plot.\n\nThe only components of the plot that are unique to each subject are the arguments to `scale_y_continuous()` and the title, so we'll define those conditional on the subject. After that, we can generate the combined plot by calling the function `plot_generator()` twice and then using the simple `cowplot` library syntax. We can add in the caption using the `plot_annotation()` function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\" code-summary=\"Hide code\"}\nplot_generator = function(df, subject) {\n  if (subject == 'math') {\n    plot_title = \"**Math** scores for **8th graders**\"\n    y_limits = c(210, 340)\n    y_breaks = seq(220, 320, by = 20)\n  }\n  else if (subject == 'reading') {\n    plot_title = \"**Reading** scores for **4th graders**\"\n    y_limits = c(150, 270)\n    y_breaks = seq(160, 260, by = 20)\n  }\n  else(\n    stop(\"Pass in either 'math' or 'reading' as an argument for subject.\")\n  )\n  \n  df_subset = df |> filter(Year >= 2000) |>\n    # Tricky note: Use rlang syntax for tidy evaluation  \n    filter(subject == !!subject) |> \n    mutate(\n      is_extreme_score = ifelse(percentile == '10' | percentile == '90', \"yes\", \"no\"),\n      pretty_label = case_when(\n        percentile == 90 & Year == 2024 ~ \"**Top<br>scorers**\",\n        percentile == 10 &\n          Year == 2024 ~ \"**Lowest<br> scorers**\",\n        (percentile >= 25 | percentile <= 90) & Year == 2024 ~\n          glue(\"{percentile}th<br>percentile\"),\n        .default = NA_character_\n      )\n    ) \n  \n  plot = df_subset |> ggplot(aes(\n    x = Year,\n    y = score,\n    group = percentile,\n    color = is_extreme_score\n  )) +\n    geom_point() +\n    geom_line() +\n    geom_richtext(\n      aes(label = pretty_label),\n      fill = NA,\n      na.rm = TRUE,\n      label.color = NA,\n      hjust = 0\n    ) +\n    theme_minimal() +\n    labs(x = NULL, y = NULL, title = plot_title) +\n    theme(\n      plot.title = element_markdown(),\n      panel.grid.major.x = element_blank(),\n      panel.grid.minor.x = element_blank(),\n      panel.grid.minor.y = element_blank(),\n      axis.ticks.x.bottom = element_line(),\n      axis.ticks.length.x.bottom = unit(0.2, \"cm\"),\n      plot.margin = margin(0.5, 2, 0.5, 0.5, \"cm\")\n    ) +\n    scale_color_manual(breaks = c('yes', 'no'),\n                       values = c('#b35f57', '#aaaaaa')) +\n    guides(color = 'none') +\n    coord_cartesian(expand = F, clip = 'off') +\n    scale_y_continuous(limits = y_limits, breaks = y_breaks) +\n    scale_x_continuous(\n      limits = c(2000, 2024),\n      breaks = c(2000, 2003, 2007, 2011, 2015, 2019, 2024),\n      labels = c(\"'00\", \"'03\", \"'07\", \"'11\", \"'15\", \"'19\", \"'24\")\n    )\n  \n  return(plot)\n}\n```\n:::\n\n\n\nNow let's show a workflow to generate the plot. The placement of the individual plots in the `cowplot` can be\nmodified using the `draw_plot()` arguments, which use relative scaling values (e.g., 0.15 means 15\\%). We can also add the caption with `draw_label()`.  The caption also has a grey dot that I couldn't replicate since the `draw_label()` function doesn't support HTML customization (it is basically a wrapper for `geom_label()`, not something from the `ggtext` package). For similar reasons, I could not add the hyperlinks.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\" code-summary=\"Hide code\"}\ndf = read_csv('national_math_8th_reading_4th_scores_1990_to_2024_by_percentile.csv') \n\nplot_math = plot_generator(df, 'math')\nplot_reading = plot_generator(df, 'reading')\n\ncaption_text <- paste(\n  \"Top scorers shown are at the 90th percentile; lowest scorers are at the 10th.\",\n  \"Scores are from the National Assessment of Educational Progress,\",\n  \"which tests a national sample of students to track educational achievement.\",\n  \"Source: NAEP. By Francesca Paris. Recreated by Akshay Prasadan.\",\n  sep = \"\\n\"\n)\n\nplot <- ggdraw() +\n  draw_plot(plot_math, x = 0, y = 0.10, width = 0.5, height = 0.85) +\n  draw_plot(plot_reading, x = 0.5, y = 0.10, width = 0.5, height = 0.85) +\n  draw_label(caption_text,\n             x = 0.03, y = 0.016, hjust = 0, vjust = 0,\n             size = 9, lineheight = 1.2,\n             fontfamily = 'franklin',\n             fontface = \"plain\", color = 'grey40')\n\nplot\n```\n\n::: {.cell-output-display}\n![](chart_replication_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\nWow! That's nearly perfect! It's time for the final batch of editing. I find it easiest to first fix a size, and then save your plot using `ggsave` with those precise dimensions. Then, I finetune the margins or font sizes until it looks appropriate for that fixed dimension. If you rely on RStudio's plotting window, then the sizes will vary depending on your zoom level or the size of the window on your monitor. This is not reproducible.\n\nRecall I imported the Libre Franklin font, which is an approximation of the NYT's font for graphics.Now I'm going to actually apply that font. After that I will make several minor sizing tweaks. This part isn't very interesting, but I'll comment my main changes.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\" code-summary=\"Hide code\"}\nshowtext_opts(dpi = 300)\nshowtext_auto()\n\nplot_generator_final = function(df, subject) {\n  if (subject == 'math') {\n    plot_title = \"**Math** scores for **8th graders**\"\n    y_limits = c(210, 340)\n    y_breaks = seq(220, 320, by = 20)\n  }\n  else if (subject == 'reading') {\n    plot_title = \"**Reading** scores for **4th graders**\"\n    y_limits = c(150, 270)\n    y_breaks = seq(160, 260, by = 20)\n  }\n  else(\n    stop(\"Pass in either 'math' or 'reading' as an argument for subject.\")\n  )\n  \n  df_subset = df |> filter(Year >= 2000) |>\n    filter(subject == !!subject) |> \n    mutate(\n      is_extreme_score = ifelse(percentile == '10' | \n                                  percentile == '90', \"yes\", \"no\"),\n      pretty_label = case_when(\n        percentile == 90 & Year == 2024 ~ \"**Top<br>scorers**\",\n        percentile == 10 &\n          Year == 2024 ~ \"**Lowest<br> scorers**\",\n        (percentile >= 25 | percentile <= 90) & Year == 2024 ~\n          glue(\"{percentile}th<br>percentile\"),\n        .default = NA_character_\n      )\n    ) \n  \n  plot = df_subset |> ggplot(aes(\n    x = Year,\n    y = score,\n    group = percentile,\n    color = is_extreme_score\n  )) +\n    geom_point() +\n    geom_line() +\n    geom_richtext(\n      aes(label = pretty_label),\n      fill = NA,\n      na.rm = TRUE,\n      label.color = NA,\n      hjust = 0,\n      size = 4, # Make label font size close to title font (units are weird)\n      lineheight = 0.75 # Reduce line spacing of labels\n    ) +\n    theme_minimal() +\n    labs(x = NULL, \n         y = NULL, \n         title = plot_title) +\n    theme(\n      text = element_text(family = 'franklin'),\n      plot.title = element_textbox_simple(size = 12, \n                                          width= NULL, \n                                          # Prevent line break in titles\n                                          padding = margin(0,0,10,0)\n      ),\n      panel.grid.major.x = element_blank(),\n      panel.grid.minor.x = element_blank(),\n      panel.grid.minor.y = element_blank(),\n      axis.ticks.x.bottom = element_line(),\n      axis.ticks.length.x.bottom = unit(0.2, \"cm\"),\n      plot.margin = margin(0, 2, 0.5, 0.5, \"cm\"),\n      # Refine axis tick label sizes, i.e., the \"'00\", \"'03\", etc.\n      axis.text.x = element_text(size = 8, family = 'franklin'),\n      axis.text.y = element_text(size = 8, hjust = 1,\n                                 margin = margin(0, 6, 0, 0)),\n      # Make sure plot title starts at plot edge (left-most boundary), \n      # not panel edge (panel = subset of plot)\n      plot.title.position = 'plot'\n    ) +\n    scale_color_manual(breaks = c('yes', 'no'),\n                       values = c('#b35f57', '#aaaaaa')) +\n    guides(color = 'none') +\n    coord_cartesian(expand = F, clip = 'off') +\n    scale_y_continuous(limits = y_limits, breaks = y_breaks) +\n    scale_x_continuous(\n      limits = c(2000, 2024),\n      breaks = c(2000, 2003, 2007, 2011, 2015, 2019, 2024),\n      labels = c(\"'00\", \"'03\", \"'07\", \"'11\", \"'15\", \"'19\", \"'24\")\n    )\n  \n  return(plot)\n}\n\n\nplot_math_final = plot_generator_final(df, 'math')\nplot_reading_final = plot_generator_final(df, 'reading')\n\n# Combine with cowplot\nplot_final <- ggdraw() +\n  draw_plot(plot_math_final, x = 0, y = 0.12, width = 0.5, height = 0.85) +\n  draw_plot(plot_reading_final, x = 0.5, y = 0.12, width = 0.5, height = 0.85) +\n  draw_label(caption_text,\n             x = 0.03, y = 0.015, hjust = 0, vjust = 0,\n             size = 9, lineheight = 1.2,\n             fontfamily = 'franklin', fontface = 'plain', color = 'grey40')\n\n# Save\nggsave(\"replicated_nyt.png\", plot_final, width = 6.6, height = 6.1, dpi = 300, bg = 'white')\n```\n:::\n\n\n\n![Replicated Graphic](replicated_nyt.png){width=1980px}\n\nLooks pretty good, right? Let me repost below the original.\n\n![NYT Graphic](nyt_graphic.png){width=1980px}\n\n# Final Remarks\n\nA careful inspection reveals many additional deficiencies in my replication attempt. For example, it seems the author actually used `alpha` as an aesthetic for the column we called `is_extreme_score`, since the percentiles seem to change transparency for the 25th, 50th, and 75th levels. The fonts seem a bit thicker too for the extremes. It would probably be easiest to just manually annotate the plot for finer font control. At this point, I feel like I'm giving up reproducibility, D.R.Y. code, and other programming tenets, but haven't I turned from a programmer into a graphic designer at this point anyway?\n\nMoreover, I still do not fully understand the best way to finetine margins of the various plot objects, since practically every `theme` argument has its own margin argument. So the spacing certainly doesn't math the original. At a certain point, I basically gave up out of frustration. \n\nBut this is an exercise in learning `ggplot`, not patience. My central goal was to prove that I, and more importantly, you, the reader, can build high quality graphics that belong in leading newspaper publications. Granted, all the credit goes to the New York Times and Francesca Paris for their original design. I look forward to some future exercises like this, perhaps with The Economist, Bloomberg, or Financial Times instead.\n\n# The complete code from start to finish\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\" code-summary=\"Hide code\"}\nshowtext_opts(dpi = 300)\nshowtext_auto()\n\nplot_generator_final = function(df, subject) {\n  if (subject == 'math') {\n    plot_title = \"**Math** scores for **8th graders**\"\n    y_limits = c(210, 340)\n    y_breaks = seq(220, 320, by = 20)\n  }\n  else if (subject == 'reading') {\n    plot_title = \"**Reading** scores for **4th graders**\"\n    y_limits = c(150, 270)\n    y_breaks = seq(160, 260, by = 20)\n  }\n  else(\n    stop(\"Pass in either 'math' or 'reading' as an argument for subject.\")\n  )\n  \n  df_subset = df |> filter(Year >= 2000) |>\n    filter(subject == !!subject) |> \n    mutate(\n      is_extreme_score = ifelse(percentile == '10' | \n                                  percentile == '90', \"yes\", \"no\"),\n      pretty_label = case_when(\n        percentile == 90 & Year == 2024 ~ \"**Top<br>scorers**\",\n        percentile == 10 &\n          Year == 2024 ~ \"**Lowest<br> scorers**\",\n        (percentile >= 25 | percentile <= 90) & Year == 2024 ~\n          glue(\"{percentile}th<br>percentile\"),\n        .default = NA_character_\n      )\n    ) \n  \n  plot = df_subset |> ggplot(aes(\n    x = Year,\n    y = score,\n    group = percentile,\n    color = is_extreme_score\n  )) +\n    geom_point() +\n    geom_line() +\n    geom_richtext(\n      aes(label = pretty_label),\n      fill = NA,\n      na.rm = TRUE,\n      label.color = NA,\n      hjust = 0,\n      size = 4, # Make label font size close to title font (units are weird)\n      lineheight = 0.75 # Reduce line spacing of labels\n    ) +\n    theme_minimal() +\n    labs(x = NULL, \n         y = NULL, \n         title = plot_title) +\n    theme(\n      text = element_text(family = 'franklin'),\n      plot.title = element_textbox_simple(size = 12, \n                                          width = NULL, \n                                          # Prevent line break in titles\n                                          padding = margin(0,0,10,0)\n      ),\n      panel.grid.major.x = element_blank(),\n      panel.grid.minor.x = element_blank(),\n      panel.grid.minor.y = element_blank(),\n      axis.ticks.x.bottom = element_line(),\n      axis.ticks.length.x.bottom = unit(0.2, \"cm\"),\n      plot.margin = margin(0, 2, 0.5, 0.5, \"cm\"),\n      # Refine axis tick label sizes, i.e., the \"'00\", \"'03\", etc.\n      axis.text.x = element_text(size = 8, family = 'franklin'),\n      axis.text.y = element_text(size = 8, hjust = 1,\n                                 margin = margin(0, 6, 0, 0)),\n      # Make sure plot title starts at plot edge (left-most boundary), \n      # not panel edge (panel = subset of plot)\n      plot.title.position = 'plot'\n    ) +\n    scale_color_manual(breaks = c('yes', 'no'),\n                       values = c('#b35f57', '#aaaaaa')) +\n    guides(color = 'none') +\n    coord_cartesian(expand = F, clip = 'off') +\n    scale_y_continuous(limits = y_limits, breaks = y_breaks) +\n    scale_x_continuous(\n      limits = c(2000, 2024),\n      breaks = c(2000, 2003, 2007, 2011, 2015, 2019, 2024),\n      labels = c(\"'00\", \"'03\", \"'07\", \"'11\", \"'15\", \"'19\", \"'24\")\n    )\n  \n  return(plot)\n}\n\ndf = read_csv('national_math_8th_reading_4th_scores_1990_to_2024_by_percentile.csv') \n\ncaption_text <- paste(\n  \"Top scorers shown are at the 90th percentile; lowest scorers are at the 10th.\",\n  \"Scores are from the National Assessment of Educational Progress,\",\n  \"which tests a national sample of students to track educational achievement.\",\n  \"Source: NAEP. By Francesca Paris. Recreated by Akshay Prasadan.\",\n  sep = \"\\n\"\n)\n\nplot_math_final = plot_generator_final(df, 'math')\nplot_reading_final = plot_generator_final(df, 'reading')\n\n# Combine with cowplot\nplot <- ggdraw() +\n  draw_plot(plot_math, x = 0, y = 0.10, width = 0.5, height = 0.85) +\n  draw_plot(plot_reading, x = 0.5, y = 0.10, width = 0.5, height = 0.85) +\n  draw_label(caption_text,\n             x = 0.03, y = 0.016, hjust = 0, vjust = 0,\n             size = 9, lineheight = 1.2,\n             fontfamily = 'franklin',\n             fontface = \"plain\", color = 'grey40')\n\n\n# Save\nggsave(\"replicated_nyt.png\", plot_final, width = 6.6, height = 6.1, dpi = 300, bg = 'white')\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}